{"version":3,"file":"DropdownColor.stories-2376160c.js","sources":["../../src/components/Dropdown/DropdownColor/DropdownColor.tsx"],"sourcesContent":["import KeyboardArrowDown from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUp from '@mui/icons-material/KeyboardArrowUp';\nimport Box from '@mui/material/Box';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Popper from '@mui/material/Popper';\nimport { styled } from '@mui/material/styles';\nimport classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Icon from '../../Icon/Icon';\nimport { DropDownColorItem, DropDownColorProps } from './DropdownColor.type';\n\nconst Root = styled(Box)(({ theme }) => ({\n  ...theme.typography.h3,\n  minWidth: 220,\n  userSelect: 'none',\n  cursor: 'pointer',\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  color: theme.color.secondary.$80,\n  backgroundColor: '#FFF',\n  padding: '8px 0px 8px 16px',\n  borderRadius: 4,\n  '&.dark': {\n    color: 'white',\n    backgroundColor: 'rgba(0, 0 ,0, 0.2)',\n  },\n  '&.Dropdown-empty': {\n    color: theme.color.secondary.$60,\n    '&.dark': {\n      color: theme.color.secondary.$80,\n    },\n  },\n  '&.Dropdown--disabled': {\n    opacity: 0.3,\n    pointerEvents: 'none',\n  },\n}));\n\nconst List = styled(Box)(({ theme }) => ({\n  backgroundColor: '#FFF',\n  margin: '8px auto',\n  borderRadius: 4,\n  boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.1)',\n  '&.dark': {\n    color: 'white',\n    backgroundColor: theme.color.secondary.$100,\n  },\n}));\n\ninterface PathLabelProps {\n  color: string;\n}\n\nconst PathLabel = styled('span')<PathLabelProps>`\n  margin: 0;\n  padding: 0;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  background-color: ${({ color }) => color};\n`;\n\ninterface OrgLabelProps {\n  color: string;\n}\n\nconst OrgLabel = styled('span')<OrgLabelProps>`\n  margin: 0;\n  padding: 0;\n  width: 6px;\n  height: 14px;\n  border-radius: 3px;\n  background-color: ${({ color }) => color};\n`;\n\ninterface ItemProps {\n  selected: boolean;\n}\n\nconst Item = styled(Box, { label: 'Dropdown-item' })<ItemProps>(\n  ({ theme, selected }) => ({\n    ...theme.typography.h3,\n    cursor: 'pointer',\n    display: 'flex',\n    alignItems: 'center',\n    lineHeight: 2.5,\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, .05)',\n    },\n    backgroundColor: selected ? 'rgba(0, 0, 0, .05)' : 'unset',\n  }),\n);\n\nconst ContainerLabel = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst DropdownColor: React.VFC<DropDownColorProps> = (props) => {\n  const {\n    list,\n    itemProps,\n    placeholder,\n    selectedId,\n    disabled,\n    onSelect,\n    popperProps,\n    selectionId,\n    mode = 'light',\n    type = 'path',\n    ...otherProps\n  } = props;\n  const selectRef = useRef<HTMLDivElement>(null);\n  const [selectedItem, setSelectedItem] = useState<DropDownColorItem | null>(\n    null,\n  );\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    if (selectedId && selectedId !== selectedItem?.id) {\n      for (let i = 0; i < list.length; i++) {\n        if (selectedId === list[i].id) {\n          setSelectedItem(list[i]);\n          break;\n        }\n      }\n    } else if (selectedId === undefined) {\n      setSelectedItem(null);\n    }\n  }, [selectedId]);\n\n  useEffect(() => {\n    for (let i = 0; i < list.length; i++) {\n      if (selectedId === list[i].id) {\n        setSelectedItem(list[i]);\n        break;\n      }\n    }\n  }, [list]);\n\n  const handleOnClickSelect = () => {\n    setIsOpen(true);\n  };\n\n  const handleOnClickAway = () => {\n    setIsOpen(false);\n  };\n\n  const handleOnClick = (item: DropDownColorItem) => {\n    setIsOpen(false);\n    onSelect(item.value, item);\n  };\n\n  const items = list\n    .filter((item) => item.id !== selectionId)\n    .map((item) => (\n      <Item\n        key={`dropdown-item-${item.id}`}\n        className=\"Dropdown-item\"\n        onClick={() => handleOnClick(item)}\n        selected={selectedItem?.id === item.id}\n        {...itemProps}\n      >\n        <Icon className=\"Dropdown-icon\">\n          {type === 'path' ? (\n            <PathLabel color={item.color} />\n          ) : (\n            <OrgLabel color={item.color} />\n          )}\n        </Icon>\n        {item.name}\n      </Item>\n    ));\n\n  return (\n    <>\n      <Root\n        ref={selectRef}\n        className={classNames(\n          'Dropdown-root',\n          {\n            'Dropdown-empty': !selectedId,\n          },\n          {\n            'Dropdown--disabled': disabled,\n          },\n          {\n            dark: mode === 'dark',\n            light: mode === 'light',\n          },\n        )}\n        onClick={handleOnClickSelect}\n        {...otherProps}\n      >\n        {selectedItem?.name ? (\n          <ContainerLabel>\n            {type === 'path' ? (\n              <PathLabel color={selectedItem?.color ?? '#000'} />\n            ) : (\n              <OrgLabel color={selectedItem?.color ?? '#000'} />\n            )}\n\n            {selectedItem?.name ?? placeholder}\n          </ContainerLabel>\n        ) : (\n          selectedItem?.name ?? placeholder\n        )}\n        <Icon className=\"Dropdown-icon\">\n          {isOpen ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\n        </Icon>\n      </Root>\n      <Popper\n        anchorEl={selectRef.current}\n        open={isOpen}\n        placement=\"bottom\"\n        {...popperProps}\n      >\n        <ClickAwayListener onClickAway={handleOnClickAway}>\n          <List\n            className={classNames({\n              dark: mode === 'dark',\n              light: mode === 'light',\n            })}\n            style={{ width: selectRef.current?.offsetWidth ?? 'auto' }}\n          >\n            {items}\n          </List>\n        </ClickAwayListener>\n      </Popper>\n    </>\n  );\n};\n\nexport default DropdownColor;\n"],"names":["Root","styled","Box","theme","List","PathLabel","color","OrgLabel","Item","selected","ContainerLabel","DropdownColor","props","list","itemProps","placeholder","selectedId","disabled","onSelect","popperProps","selectionId","mode","type","otherProps","selectRef","useRef","selectedItem","setSelectedItem","useState","isOpen","setIsOpen","useEffect","i","handleOnClickSelect","handleOnClickAway","handleOnClick","item","items","React","Icon","classNames","KeyboardArrowUp","KeyboardArrowDown","Popper","ClickAwayListener","_a"],"mappings":"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"}